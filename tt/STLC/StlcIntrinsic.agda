module STLC.StlcIntrinsic where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl)
open import Data.Unit using (‚ä§; tt)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§?_; z‚â§n; s‚â§s)
open import Data.Product using (Œ£; ‚àÉ; Œ£-syntax; ‚àÉ-syntax; _√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Nullary.Negation using (¬¨_)
open import Relation.Nullary.Decidable using (True; toWitness)

infix  4 _‚ä¢_
infix  4 _‚àã_
infixl 5 _‚óÇ_

infixr 7 _‚áí_

infix  5 ∆õ_
infixl 7 _¬∑_
infix  9 `_
infix  9 ùï§_
infix  9 #_

data Type : Set where
  _‚áí_ : Type ‚Üí Type ‚Üí Type
  `ans  : Type

data Context : Set where
  ‚àÖ   : Context
  _‚óÇ_ : Context ‚Üí Type ‚Üí Context

variable
  A B C : Type
  Œì Œî : Context

data _‚àã_ : Context ‚Üí Type ‚Üí Set where
  ùï´ : Œì ‚óÇ A ‚àã A

  ùï§_ : Œì ‚àã A
      ---------
    ‚Üí Œì ‚óÇ B ‚àã A

data _‚ä¢_ : Context ‚Üí Type ‚Üí Set where

  `_ : Œì ‚àã A
      -----
    ‚Üí Œì ‚ä¢ A

  ∆õ_ : Œì ‚óÇ A ‚ä¢ B
      ---------
    ‚Üí Œì ‚ä¢ A ‚áí B

  _¬∑_ : Œì ‚ä¢ A ‚áí B
    ‚Üí Œì ‚ä¢ A
      ---------
    ‚Üí Œì ‚ä¢ B
  
  `yes : Œì ‚ä¢ `ans

  `no : Œì ‚ä¢ `ans

-- PLFA's helper functions on de Bruijn indices
length : Context ‚Üí ‚Ñï
length ‚àÖ        =  zero
length (Œì ‚óÇ _)  =  suc (length Œì)

lookup : {n : ‚Ñï} ‚Üí (p : n < length Œì) ‚Üí Type
lookup {(_ ‚óÇ A)} {zero}    (s‚â§s z‚â§n)  =  A
lookup {(Œì ‚óÇ _)} {(suc n)} (s‚â§s p)    =  lookup p

count : {n : ‚Ñï} ‚Üí (p : n < length Œì) ‚Üí Œì ‚àã lookup p
count {_ ‚óÇ _} {zero}    (s‚â§s z‚â§n)  =  ùï´
count {Œì ‚óÇ _} {(suc n)} (s‚â§s p)    =  ùï§ (count p)

#_ : (n : ‚Ñï)
  ‚Üí {n‚ààŒì : True (suc n ‚â§? length Œì)}
    --------------------------------
  ‚Üí Œì ‚ä¢ lookup (toWitness n‚ààŒì)
#_ n {n‚ààŒì}  =  ` count (toWitness n‚ààŒì)

Rename Subst Function : Context ‚Üí Context ‚Üí Set
Rename   Œì Œî = ‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A
Subst    Œì Œî = ‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A
Function Œì Œî = ‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A

-- Renaming weakening
ext : Rename Œì Œî ‚Üí Rename (Œì ‚óÇ B) (Œî ‚óÇ B)
ext œÅ ùï´     = ùï´
ext œÅ (ùï§ x) = ùï§ (œÅ x)

ren : Rename Œì Œî ‚Üí Function Œì Œî
ren œÅ (` x)   = ` (œÅ x)
ren œÅ (∆õ N)   = ∆õ (ren (ext œÅ) N)
ren œÅ (M ¬∑ N) = ren œÅ M ¬∑ ren œÅ N
ren œÅ (`yes)  = `yes
ren œÅ (`no)   = `no

-- Substitution weakening
exts : Subst Œì Œî ‚Üí Subst (Œì ‚óÇ B) (Œî ‚óÇ B)
exts œÉ ùï´     = ` ùï´
exts œÉ (ùï§ x) = ren ùï§_ (œÉ x)

subst : Subst Œì Œî ‚Üí Function Œì Œî
subst œÉ (` x)   = œÉ x
subst œÉ (∆õ N)   = ∆õ (subst (exts œÉ) N)
subst œÉ (M ¬∑ N) = subst œÉ M ¬∑ subst œÉ N
subst œÉ (`yes)  = `yes
subst œÉ (`no)   = `no

‚ü™_‚ü´ : ‚àÄ{Œì Œî A} ‚Üí Subst Œì Œî ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A
‚ü™ œÉ ‚ü´ M = subst œÉ M

_[_] : ‚àÄ {Œì A B}
  ‚Üí Œì ‚óÇ B ‚ä¢ A
  ‚Üí Œì ‚ä¢ B
    ---------
  ‚Üí Œì ‚ä¢ A
_[_] {Œì} {A} {B} N M =  subst œÉ N
  where
  œÉ : ‚àÄ {A} ‚Üí Œì ‚óÇ B ‚àã A ‚Üí Œì ‚ä¢ A
  œÉ ùï´      =  M
  œÉ (ùï§ x)  =  ` x


infixl 6 _‚Ä¢‚Çõ_

‚Üë‚Çõ : Subst Œì (Œì ‚óÇ A)
‚Üë‚Çõ x = ` (ùï§ x)

_‚Ä¢‚Çõ_ : Subst Œì Œî ‚Üí Œî ‚ä¢ A ‚Üí Subst (Œì ‚óÇ A) Œî
(œÉ ‚Ä¢‚Çõ M)  ùï´    = M
(œÉ ‚Ä¢‚Çõ _) (ùï§ x) = œÉ x

ids : Subst Œì Œì
ids x = ` x




-- Subject reduction is intrinsically encoded by small-step evaluation relation
data Value : Œì ‚ä¢ A ‚Üí Set where

  V-∆õ : ‚àÄ {N : Œì ‚óÇ A ‚ä¢ B}
      ---------------------------
    ‚Üí Value (∆õ N)

  V-yes : Value (`yes {Œì})

  V-no :  Value (`no {Œì})


infix 2 _‚Äî‚Üí_

data _‚Äî‚Üí_ : (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where

  Œæ-¬∑‚ÇÅ : ‚àÄ {L L‚Ä≤ : Œì ‚ä¢ A ‚áí B} {M : Œì ‚ä¢ A}
    ‚Üí L ‚Äî‚Üí L‚Ä≤
      ---------------
    ‚Üí L ¬∑ M ‚Äî‚Üí L‚Ä≤ ¬∑ M

  Œæ-¬∑‚ÇÇ : ‚àÄ {V : Œì ‚ä¢ A ‚áí B} {M M‚Ä≤ : Œì ‚ä¢ A}
    ‚Üí Value V
    ‚Üí M ‚Äî‚Üí M‚Ä≤
      ---------------
    ‚Üí V ¬∑ M ‚Äî‚Üí V ¬∑ M‚Ä≤

  Œ≤-∆õ : ‚àÄ {N : Œì ‚óÇ A ‚ä¢ B} {W : Œì ‚ä¢ A}
    ‚Üí Value W
      --------------------
    ‚Üí (∆õ N) ¬∑ W ‚Äî‚Üí N [ W ]

-- transitive closure of evaluation relation
infix  2 _‚Äî‚Ü†_
infix  1 begin_
infixr 2 _‚Äî‚Ü†‚ü®_‚ü©_
infixr 2 _‚Äî‚Üí‚ü®_‚ü©_
infix  3 _‚àé

data _‚Äî‚Ü†_ {Œì A} : (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where

  _‚àé : (M : Œì ‚ä¢ A)
      ------
    ‚Üí M ‚Äî‚Ü† M

  step‚Äî‚Üí : (L : Œì ‚ä¢ A) {M N : Œì ‚ä¢ A}
    ‚Üí M ‚Äî‚Ü† N
    ‚Üí L ‚Äî‚Üí M
      ------
    ‚Üí L ‚Äî‚Ü† N

pattern _‚Äî‚Üí‚ü®_‚ü©_ L L‚Äî‚ÜíM M‚Äî‚Ü†N = step‚Äî‚Üí L M‚Äî‚Ü†N L‚Äî‚ÜíM

begin_ : {M N : Œì ‚ä¢ A}
  ‚Üí M ‚Äî‚Ü† N
    ------
  ‚Üí M ‚Äî‚Ü† N
begin M‚Äî‚Ü†N = M‚Äî‚Ü†N

‚Äî‚Ü†-trans : (L : Œì ‚ä¢ A) {M N : Œì ‚ä¢ A}
  ‚Üí M ‚Äî‚Ü† N
  ‚Üí L ‚Äî‚Ü† M
    ------
  ‚Üí L ‚Äî‚Ü† N
‚Äî‚Ü†-trans _ M‚Äî‚Ü†N (L‚Äî‚Ü†M ‚àé) = M‚Äî‚Ü†N
‚Äî‚Ü†-trans _ M‚Äî‚Ü†N (L ‚Äî‚Üí‚ü® L‚Äî‚ÜíM‚Ä≤ ‚ü© M‚Ä≤‚Äî‚Ü†M) = L ‚Äî‚Üí‚ü® L‚Äî‚ÜíM‚Ä≤ ‚ü© (‚Äî‚Ü†-trans _ M‚Äî‚Ü†N M‚Ä≤‚Äî‚Ü†M)

_‚Äî‚Ü†‚ü®_‚ü©_ : (L : Œì ‚ä¢ A) {M N : Œì ‚ä¢ A}
  ‚Üí L ‚Äî‚Ü† M
  ‚Üí M ‚Äî‚Ü† N
    ------
  ‚Üí L ‚Äî‚Ü† N
L ‚Äî‚Ü†‚ü® L‚Äî‚Ü†M ‚ü© M‚Äî‚Ü†N = ‚Äî‚Ü†-trans L M‚Äî‚Ü†N L‚Äî‚Ü†M

Œæ-¬∑‚ÇÅ/‚Äî‚Ü† : ‚àÄ {Œì A B} {M M‚Ä≤ : Œì ‚ä¢ A ‚áí B} {N : Œì ‚ä¢ A}
  ‚Üí M ‚Äî‚Ü† M‚Ä≤
  ‚Üí M ¬∑ N ‚Äî‚Ü† M‚Ä≤ ¬∑ N
Œæ-¬∑‚ÇÅ/‚Äî‚Ü† {N = N} (M‚Äî‚Ü†M‚Ä≤ ‚àé) = M‚Äî‚Ü†M‚Ä≤ ¬∑ N ‚àé
Œæ-¬∑‚ÇÅ/‚Äî‚Ü† {N = N} (step‚Äî‚Üí M L‚Äî‚Ü†M‚Ä≤ M‚Äî‚ÜíL) =
  step‚Äî‚Üí (M ¬∑ N) (Œæ-¬∑‚ÇÅ/‚Äî‚Ü† L‚Äî‚Ü†M‚Ä≤) (Œæ-¬∑‚ÇÅ M‚Äî‚ÜíL)

Œæ-¬∑‚ÇÇ/‚Äî‚Ü† : ‚àÄ {Œì A B} {V : Œì ‚ä¢ A ‚áí B} {N N‚Ä≤ : Œì ‚ä¢ A}
  ‚Üí Value V
  ‚Üí N ‚Äî‚Ü† N‚Ä≤
  ‚Üí V ¬∑ N ‚Äî‚Ü† V ¬∑ N‚Ä≤
Œæ-¬∑‚ÇÇ/‚Äî‚Ü† {V = V} V-∆õ (N‚Äî‚Ü†N‚Ä≤ ‚àé) = V ¬∑ N‚Äî‚Ü†N‚Ä≤ ‚àé
Œæ-¬∑‚ÇÇ/‚Äî‚Ü† {V = V} V-∆õ (step‚Äî‚Üí N L‚Äî‚Ü†N‚Ä≤ N‚Äî‚ÜíL) =
  step‚Äî‚Üí (V ¬∑ N) (Œæ-¬∑‚ÇÇ/‚Äî‚Ü† V-∆õ L‚Äî‚Ü†N‚Ä≤) (Œæ-¬∑‚ÇÇ V-∆õ N‚Äî‚ÜíL)

-- Progress
data Progress (M : ‚àÖ ‚ä¢ A) : Set where

  step : ‚àÄ {N : ‚àÖ ‚ä¢ A}
    ‚Üí M ‚Äî‚Üí N
      ----------
    ‚Üí Progress M

  done :
      Value M
      ----------
    ‚Üí Progress M


progress : ‚àÄ {A} ‚Üí (M : ‚àÖ ‚ä¢ A) ‚Üí Progress M
progress (∆õ M) = done V-∆õ
progress (L ¬∑ M) with progress L
... | step L‚Äî‚ÜíL‚Ä≤                = step (Œæ-¬∑‚ÇÅ L‚Äî‚ÜíL‚Ä≤)
... | done V-∆õ with progress M
...   | step M‚Äî‚ÜíM‚Ä≤              = step (Œæ-¬∑‚ÇÇ V-∆õ M‚Äî‚ÜíM‚Ä≤)
...   | done VM                 = step (Œ≤-∆õ VM)
progress `yes = done V-yes
progress `no = done V-no

-- Termination (proof by logical relation)
‚Ñ∞ : ‚àÄ {Œì} ‚Üí (B : Type) ‚Üí Œì ‚ä¢ B ‚Üí Set
ùí± : ‚àÄ {Œì} ‚Üí (A : Type) ‚Üí Œì ‚ä¢ A ‚Üí Set

‚Ñ∞ {Œì} B M = Œ£[ w ‚àà Œì ‚ä¢ B ] (Value w) √ó (ùí± B w) √ó (M ‚Äî‚Ü† w)

ùí± `ans    `yes      = ‚ä§
ùí± `ans    `no       = ‚ä§
ùí± `ans     _        = ‚ä•
ùí± {Œì} (A ‚áí B) (∆õ N) = ‚àÄ {a : (Œì ‚ä¢ A)} ‚Üí ùí± A a ‚Üí ‚Ñ∞ B (N [ a ])
ùí± {Œì} (A ‚áí B) _     = ‚ä• 


-- Fundamental theorem of logical relation
-- Stronger version
-- To prove `‚àÖ ‚ä¢ Œªx. N : A ‚áí B ‚àà ùí± (A ‚áí B)`, we depends on the properties
-- of open term `N`.
-- The induction hypothesis is to strong in this case.
postulate
  fundamental/strong : ‚àÄ (a : ‚àÖ ‚ä¢ A) ‚Üí ‚Ñ∞ A a


-- Lemmas to prove the fundamental theorem
ùí±/Value : ‚àÄ {a : Œì ‚ä¢ A} ‚Üí ùí± A a ‚Üí Value a
ùí±/Value {a = ∆õ N}  _ = V-∆õ
ùí±/Value {a = `yes} _ = V-yes
ùí±/Value {a = `no}  _ = V-no

ùí±/‚Ñ∞ : ‚àÄ {A} {a : Œì ‚ä¢ A} ‚Üí ùí± A a ‚Üí ‚Ñ∞ A a
ùí±/‚Ñ∞ {a = w} ùí±w = ‚ü® w , ‚ü® ùí±/Value ùí±w , ‚ü® ùí±w , w ‚àé ‚ü© ‚ü© ‚ü© 

-- We requires a good property on substitution:
-- substition maps free variables in `Œì` to "good values" under `Œî`.
subst/Œì‚àãx/ùí± : ‚àÄ (Œì : Context) ‚Üí Subst Œì ‚àÖ ‚Üí Set
subst/Œì‚àãx/ùí± Œì œÉ = ‚àÄ (A : Type) ‚Üí (‚àãa : Œì ‚àã A) ‚Üí ùí± A (œÉ ‚àãa)

-- cons a "good value" preserves the "good" property of substitution
cons/subst/Œì‚àãx/ùí± : ‚àÄ {Œì A} {a : ‚àÖ ‚ä¢ A} {œÉ : Subst Œì ‚àÖ}
  ‚Üí subst/Œì‚àãx/ùí± Œì œÉ
  ‚Üí ùí± A a
  --------------
  ‚Üí subst/Œì‚àãx/ùí± (Œì ‚óÇ A) (œÉ ‚Ä¢‚Çõ a)
cons/subst/Œì‚àãx/ùí± œÉ/ùí± a/ùí± _ ùï´ = a/ùí±
cons/subst/Œì‚àãx/ùí± œÉ/ùí± a/ùí± A‚Ä≤ (ùï§ ‚àãa) = œÉ/ùí± A‚Ä≤ ‚àãa

-- Substitution lemmas
postulate
  subst/ids : ‚àÄ {M : Œì ‚ä¢ A} ‚Üí ‚ü™ ids ‚ü´ M ‚â° M
  exts/subst/cons : ‚àÄ (œÉ : Subst Œì Œî) (N : Œì ‚óÇ A ‚ä¢ B) (V : Œî ‚ä¢ A) 
    ‚Üí (‚ü™ exts œÉ ‚ü´ N) [ V ] ‚â° ‚ü™ œÉ ‚Ä¢‚Çõ V ‚ü´ N

-- Weaker version of fundamental theorem of logical relation.
-- Induction on `Œì ‚ä¢ t : A`
fundamental : ‚àÄ {Œì} {A} {a : Œì ‚ä¢ A} {œÉ : Subst Œì ‚àÖ}
  ‚Üí (subst/Œì‚àãx/ùí± Œì œÉ)
  ‚Üí ‚Ñ∞ A (‚ü™ œÉ ‚ü´ a)
-- t = x. x[œÉ] is a value.
-- By constraints on `œÉ`, x[œÉ] ‚àà ùí± A
fundamental {A = A} {a = ` ‚àãx} {œÉ = œÉ} œÉ/ùí± = ùí±/‚Ñ∞ (œÉ/ùí± A ‚àãx)
fundamental {a = `yes}         _   = ùí±/‚Ñ∞ tt
fundamental {a = `no}          _   = ùí±/‚Ñ∞ tt
-- t = ∆õx. N. t[œÉ] is self is a value.
-- The renaming part is to prove t[œÉ] is a "good value".
-- i.e., ‚àÄ {a : (Œì ‚ä¢ A)} ‚Üí ùí± A a ‚Üí ‚Ñ∞ B (N [ a ])
fundamental {Œì} {A = A ‚áí B} {∆õ N} {œÉ} œÉ/ùí± =
  ‚ü® w , ‚ü® V-∆õ , ‚ü® subst/∆õ/ùí± , w ‚àé ‚ü© ‚ü© ‚ü© 
  where
  w : ‚àÖ ‚ä¢ A ‚áí B
  w = ‚ü™ œÉ ‚ü´ (∆õ N)
  -- For any `a ‚àà ùí± A`, we have `œÉ ‚Ä¢‚Çõ a ‚àà Subst (Œì ‚óÇ A) ‚àÖ`,
  -- By induction hypothesis, ‚àÉ w ‚àà ùí± B, ‚ü™ œÉ ‚Ä¢‚Çõ a ‚ü´ N ‚Äî‚Ü† w.
  -- By Œ≤-reduction, f a = (‚ü™ œÉ ‚ü´ Œªx. N) a ‚Äî‚Ü† ‚ü™ œÉ ‚Ä¢‚Çõ a ‚ü´ N ‚Äî‚Ü† w.
  subst/∆õ/ùí± : ‚àÄ {a : (‚àÖ ‚ä¢ A)} ‚Üí ùí± A a ‚Üí ‚Ñ∞ B ((‚ü™ exts œÉ ‚ü´ N) [ a ])
  subst/∆õ/ùí± {a} a/ùí± with fundamental {Œì ‚óÇ A} {B} {N} {œÉ ‚Ä¢‚Çõ a} (cons/subst/Œì‚àãx/ùí± œÉ/ùí± a/ùí±)
  ... | ‚ü® w , ‚ü® w/Value , ‚ü® w/ùí± , NœÉ‚Äî‚Ü†w ‚ü© ‚ü© ‚ü© 
        rewrite exts/subst/cons œÉ N a = ‚ü® w , ‚ü® w/Value , ‚ü® w/ùí± , NœÉ‚Äî‚Ü†w ‚ü© ‚ü© ‚ü©
-- t = M ¬∑ N.
-- By induction hypothesis, we have `‚àÉ M‚Ä≤ ‚àà ùí± (A ‚áí B)`, `M ‚Äî‚Ü† M‚Ä≤` and `‚àÉ N‚Ä≤ ‚àà ùí± A`, `N ‚Äî‚Ü† N‚Ä≤`
-- By definition of `ùí± (A ‚áí B)`, `‚àÄ v ‚àà ùí± A, ‚àÉ w ‚àà ùí± B, M‚Ä≤ v ‚Äî‚Ü† w¬≠`. 
fundamental {a = M ¬∑ N} {œÉ = œÉ} œÉ/ùí± with fundamental {a = M} œÉ/ùí± | fundamental {a = N} œÉ/ùí±
... | ‚ü® M‚Ä≤ , ‚ü® V-∆õ {N = M‚Ä≤/body} , ‚ü® M‚Ä≤/ùí± , M‚Äî‚Ü†M‚Ä≤ ‚ü© ‚ü© ‚ü© | ‚ü® N‚Ä≤ , ‚ü® N‚Ä≤/Value , ‚ü® N‚Ä≤/ùí± , N‚Äî‚Ü†N‚Ä≤ ‚ü© ‚ü© ‚ü©
      with M‚Ä≤/ùí± N‚Ä≤/ùí±
...     | ‚ü® v , ‚ü® v/Value , ‚ü® v/ùí± , M‚Ä≤N‚Ä≤‚Äî‚Ü†v ‚ü© ‚ü© ‚ü© = 
          ‚ü® v , ‚ü® v/Value , ‚ü® v/ùí± , MN‚Äî‚Ü†v ‚ü© ‚ü© ‚ü©
        where
        MN‚Äî‚Ü†v : ‚ü™ œÉ ‚ü´ M ¬∑ ‚ü™ œÉ ‚ü´ N ‚Äî‚Ü† v
        MN‚Äî‚Ü†v = begin
            ‚ü™ œÉ ‚ü´ M ¬∑ ‚ü™ œÉ ‚ü´ N
          ‚Äî‚Ü†‚ü® Œæ-¬∑‚ÇÅ/‚Äî‚Ü† M‚Äî‚Ü†M‚Ä≤ ‚ü©
            M‚Ä≤ ¬∑ ‚ü™ œÉ ‚ü´ N
          ‚Äî‚Ü†‚ü® Œæ-¬∑‚ÇÇ/‚Äî‚Ü† V-∆õ N‚Äî‚Ü†N‚Ä≤ ‚ü©
            M‚Ä≤ ¬∑ N‚Ä≤
          ‚Äî‚Üí‚ü® Œ≤-∆õ N‚Ä≤/Value ‚ü©
            M‚Ä≤/body [ N‚Ä≤ ]
          ‚Äî‚Ü†‚ü® M‚Ä≤N‚Ä≤‚Äî‚Ü†v ‚ü©
            v
          ‚àé

ids/‚àÖ‚àãx/ùí± : subst/Œì‚àãx/ùí± ‚àÖ ids
ids/‚àÖ‚àãx/ùí± A = Œª{ () }

termination : ‚àÄ (M : ‚àÖ ‚ä¢ A) ‚Üí Œ£[ w ‚àà ‚àÖ ‚ä¢ A ] Value w √ó (M ‚Äî‚Ü† w)
termination M with fundamental {a = M} {œÉ = ids} ids/‚àÖ‚àãx/ùí±
... | ‚ü® w , ‚ü® w/Value , ‚ü® _ , M‚Äî‚Ü†w ‚ü© ‚ü© ‚ü© 
      rewrite subst/ids {M = M} = ‚ü® w , ‚ü® w/Value , M‚Äî‚Ü†w ‚ü© ‚ü©